@namespace OkeanElzy
@classname RockstarParser
@using System.Globalization

program<SyntaxNode> = p:list EOF { p }

list<BlockNode>
    = head:statement EOL tail:list { new BlockNode(head).Concat(tail) }
    / line:statement { new BlockNode(line) }

statement<SyntaxNode> 
    = output 
    / assign

assign<AssignNode> 
    = v:variable _ ('is'i/'was'i) _ e:expression { new AssignNode(v, e) }

output<OutputNode> 
    = say _ e:expression { new OutputNode(e) }

say = 'say'i/'scream'i/'whisper'i/'shout'i

expression = lookup / addition / literal

literal = poetic_literal

poetic_literal<NumberNode> 
    = 'like'i _ tokens:("" .*) { 
        new NumberNode(tokens) }

lookup<SyntaxNode> 
    = v:variable { new LookupNode(v) }

variable
    = common_variable

common_variable<VariableNode>  
    = prefix:("" 'the'i / 'my'i / 'your'i) [\t ]+ id:("" [A-Za-z]+) { new VariableNode($"{prefix}_{id}".ToLower()) }    

addition<SyntaxNode> 
    = lhs:multiplication _ '+' _ rhs:addition { new AdditionNode(lhs,rhs) }
    / lhs:multiplication _ '-' _ rhs:addition { new SubtractionNode(lhs,rhs) }
    / multiplication

multiplication<SyntaxNode> 
    = lhs:number _ '*' _ rhs:multiplication { new MultiplicationNode(lhs,rhs) }
    / lhs:number _ '/' _ rhs:multiplication { new DivisionNode(lhs,rhs) }
    / number

number<NumberNode> 
	= value:("" [0-9]+) { new NumberNode(decimal.Parse(value)) }

_ = [ \t]*

EOL 
    = '\n'

EOF
    = !.
    / unexpected:. #error{ $"Unexpected character {unexpected}." }