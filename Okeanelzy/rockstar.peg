@namespace OkeanElzy
@classname RockstarParser
@using System.Globalization

program<SyntaxNode> = p:list EOF { p }

list<BlockNode>
    = head:statement EOL tail:list { new BlockNode(head).Concat(tail) }
    / line:statement { new BlockNode(line) }

statement<SyntaxNode> 
    = output 
    / assign

assign<AssignNode> 
    = v:variable _ ('is'i/'was'i) _ e:expression { new AssignNode(v, e) }

output<OutputNode> 
    = say _ e:expression { new OutputNode(e) }

say = 'say'i/'scream'i/'whisper'i/'shout'i

expression = addition / value

literal = poetic_literal

poetic_literal<NumberNode> 
    = 'like'i _ tokens:("" [A-Za-z0-9 ]+) { 
        new NumberNode(tokens) }

lookup<SyntaxNode> 
    = v:variable { new LookupNode(v) }

variable
    = common_variable

common_variable<VariableNode>  
    = prefix:("" 'the'i / 'my'i / 'your'i) [\t ]+ id:("" [A-Za-z]+) { new VariableNode($"{prefix}_{id}".ToLower()) }    

plus = '+' / 'with'i / 'plus'i;
minus = '-' / 'without'i / 'minus'i
times = '*' / 'of'i / 'times'i
divide = '/' / 'over' / 'divided by'i

addition<SyntaxNode> 
    = lhs:multiplication _ plus _ rhs:addition { new AdditionNode(lhs,rhs) }
    / lhs:multiplication _ minus _ rhs:addition { new SubtractionNode(lhs,rhs) }
    / multiplication

multiplication<SyntaxNode> 
    = lhs:value _ times _ rhs:multiplication { new MultiplicationNode(lhs,rhs) }
    / lhs:value _ divide  _ rhs:multiplication { new DivisionNode(lhs,rhs) }
    / value

value<SyntaxNode> = lookup / number / literal

number<NumberNode> 
	= value:("" [0-9]+) { new NumberNode(decimal.Parse(value)) }

_ = [ \t]*

EOL 
    = '\n'

EOF
    = '\n'* !.
    / unexpected:. #error{ $"Unexpected character {unexpected}." }